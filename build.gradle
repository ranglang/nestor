buildscript {
    ext {
        kotlin_version = '1.2.31'
        springBootVersion = '1.5.12.RELEASE'
        shadowVersion = '2.0.3'
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-snapshot" }
        maven { url "https://repo.spring.io/plugins-milestone" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.github.ben-manes:gradle-versions-plugin:0.17.0"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE'
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-noarg"
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "com.github.ben-manes.versions"

    group 'org.gotson'
    version '0.0.1-SNAPSHOT'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    ext {
        springCloudFunctionVersion = "1.0.0.M6"
        awsSdkVersion = "1.11.314"
        awsLambdaEventsVersion = "2.1.0"
        awsLambdaCoreVersion = "1.2.0"
        jacksonVersion = "2.9.5"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-function-dependencies:${springCloudFunctionVersion}"
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        compile 'io.github.microutils:kotlin-logging:1.5.4'

        compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"

        compile 'com.fatboyindustrial.gson-jodatime-serialisers:gson-jodatime-serialisers:1.6.0'
        compile 'com.fatboyindustrial.gson-javatime-serialisers:gson-javatime-serialisers:1.1.1'

        compile("org.springframework.cloud:spring-cloud-starter-function-web")

        compile("com.amazonaws:aws-lambda-java-events:${awsLambdaEventsVersion}")
        compileOnly("com.amazonaws:aws-lambda-java-core:${awsLambdaCoreVersion}")
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*

configure([project(":nestor-booker"), project(":nestor-core")]) {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.github.johnrengelman.shadow'

    ext['reactor.version'] = "3.1.2.RELEASE"
    ext['selenium.version'] = "3.11.0"

    assemble.dependsOn = [shadowJar, bootRepackage]

    jar {
        manifest {
            attributes 'Start-Class': 'org.gotson.nestor.Application'
        }
    }

    shadowJar {
        classifier = 'aws'
        dependencies {
            exclude(dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
        }
        // Required for Spring
        mergeServiceFiles()
        append 'META-INF/spring.handlers'
        append 'META-INF/spring.schemas'
        append 'META-INF/spring.tooling'
        transform(PropertiesFileTransformer) {
            paths = ['META-INF/spring.factories' ]
            mergeStrategy = "append"
        }
    }

    configurations {
        testCompile.extendsFrom(compileOnly)
    }

    dependencies {
        compile project(':nestor-parent')

        compile("org.springframework.cloud:spring-cloud-function-adapter-aws")

        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    bootRun { systemProperties = System.properties }
}