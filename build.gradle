buildscript {
    ext {
        kotlin_version = '1.2.41'
        springBootVersion = '1.5.12.RELEASE'
        shadowVersion = '2.0.3'
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url = "https://repo.spring.io/plugins-snapshot" }
        maven { url = "https://repo.spring.io/plugins-milestone" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.17.0"
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.38"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-noarg'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.ben-manes.versions'

    group = 'org.gotson'
    version = '1.0.0'

    repositories {
        jcenter()
        mavenCentral()
        maven { url = "https://repo.spring.io/snapshot" }
        maven { url = "https://repo.spring.io/milestone" }
    }

    ext {
        springCloudFunctionVersion = "1.0.0.M6"
        awsSdkVersion = '1.11.319'
        awsLambdaEventsVersion = '2.1.0'
        awsLambdaCoreVersion = '1.2.0'
        jacksonVersion = '2.9.5'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-function-dependencies:${springCloudFunctionVersion}"
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        compile "io.github.microutils:kotlin-logging:1.5.4"

        compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion"

        compile "com.fatboyindustrial.gson-jodatime-serialisers:gson-jodatime-serialisers:1.6.0"
        compile "com.fatboyindustrial.gson-javatime-serialisers:gson-javatime-serialisers:1.1.1"

        compile "org.springframework.cloud:spring-cloud-starter-function-web"

        compile "com.amazonaws:aws-lambda-java-events:${awsLambdaEventsVersion}"
        compileOnly "com.amazonaws:aws-lambda-java-core:${awsLambdaCoreVersion}"

        testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    }

    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }

    processResources {
        filesMatching('application.yml') {
            expand(project.properties)
        }
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer
import jp.classmethod.aws.gradle.s3.AmazonS3FileDeleteTask
import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask
import jp.classmethod.aws.gradle.s3.CreateBucketTask

configure([project(":nestor-booker"), project(":nestor-core")]) {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'jp.classmethod.aws.s3'
    apply plugin: 'org.springframework.boot'

    ext['reactor.version'] = '3.1.2.RELEASE'
    ext['selenium.version'] = '3.11.0'

    assemble.dependsOn = [shadowJar, bootRepackage]

    jar {
        manifest {
            attributes 'Start-Class': 'org.gotson.nestor.Application'
        }
    }

    shadowJar {
        classifier = 'aws'
        version = null
        dependencies {
            exclude(dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
        }
        // Required for Spring
        mergeServiceFiles()
        append 'META-INF/spring.handlers'
        append 'META-INF/spring.schemas'
        append 'META-INF/spring.tooling'
        transform(PropertiesFileTransformer) {
            paths = ['META-INF/spring.factories']
            mergeStrategy = 'append'
        }
    }

    configurations {
        testCompile.extendsFrom(compileOnly)
    }

    dependencies {
        compile project(':nestor-parent')

        compile("org.springframework.cloud:spring-cloud-function-adapter-aws")
    }

    bootRun { systemProperties = System.properties }


    def myBucketName = 'gotson-lambda-packages'
    def jarName = configurations['shadow'].artifacts.files.singleFile.name

    task createS3Bucket(type: CreateBucketTask) {
        bucketName = myBucketName
        region = 'ap-southeast-1'
        ifNotExists = true
    }

    task uploadJar(type: AmazonS3FileUploadTask, dependsOn: [createS3Bucket, build]) {
        file = new File(configurations['shadow'].artifacts.files.singleFile.absolutePath)
        bucketName = myBucketName
        key = jarName
    }

    task deleteJar(type: AmazonS3FileDeleteTask) {
        bucketName = myBucketName
        key = jarName
        mustRunAfter 'updateLambdaCode'
    }

    task('updateLambdaCode') {
        dependsOn uploadJar
        group = 'aws'
        logging.captureStandardOutput LogLevel.INFO
        doLast {
            List<String> functions = project.ext.has('aws.functions') ? project.ext['aws.functions'] : [project.name]

            functions.each { function ->
                exec {
                    executable = 'aws'
                    args = ['lambda', 'update-function-code', '--function-name', function, '--s3-bucket', myBucketName, '--s3-key', jarName]
                }
            }
        }
    }
}